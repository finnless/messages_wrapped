use std::time::Instant;

use imessage_database::tables::messages::Message;
use stats::{ResponseTimeStats, YearStats, YearsStats};

use crate::contacts::*;
use crate::handles::Handles;
use crate::message::MessageExt;
use crate::stats::stats_accumulator::StatsAccumulator;
use crate::StatsGenerationTiming;

pub mod stats {
	include!(concat!(env!("OUT_DIR"), "/stats.rs"));
}

pub fn get_all_yearly_stats(
	messages: &[Message], contacts: &Contacts, handles: &Handles
) -> (YearsStats, StatsGenerationTiming) {
	let start = Instant::now();
	let mut all_stats = Vec::new();

	let mut accumulator = StatsAccumulator::new();
	for message in messages {
		accumulator.process_message(message, handles, contacts);
	}

	let mut years: Vec<i32> = messages.iter().map(|m| m.time().year() as i32).collect();
	years.push(0);
	years.sort_unstable();
	years.dedup();

	for year in &years {
		let chat_stats = accumulator.get_chat_stats(messages, contacts, handles, 5);
		let (top_group, top_individual, top_down_bad, top_texters) =
			chat_stats.get(year).cloned().unwrap_or_default();

		let response_time_start = Instant::now();
		let (fastest, slowest) = accumulator
			.get_response_time_stats(*year, contacts)
			.unwrap_or_else(|| (ResponseTimeStats::default(), ResponseTimeStats::default()));
		let _ = response_time_start.elapsed();

		let reactions_start = Instant::now();
		let (top_hater, top_glazer) = accumulator
			.get_top_reactioners(*year, contacts)
			.unwrap_or_default();
		accumulator.timings.borrow_mut().reactionner_time += reactions_start.elapsed();

		let top_double_texter = accumulator
			.get_top_double_texter(*year, contacts)
			.unwrap_or_default();

		let worst_send_received = accumulator
			.get_worst_send_received_ratio(*year, contacts, handles)
			.unwrap_or_default();

		let year_stats = YearStats {
			year: *year,
			message_count: accumulator
				.get_yearly_counts()
				.get(year)
				.cloned()
				.unwrap_or_default(),
			monthly_stats: accumulator
				.get_monthly_stats()
				.get(year)
				.cloned()
				.unwrap_or_default(),
			weekday_stats: accumulator
				.get_weekday_stats()
				.get(year)
				.cloned()
				.unwrap_or_default(),
			hourly_stats: accumulator
				.get_hourly_stats()
				.get(year)
				.cloned()
				.unwrap_or_default(),
			most_sent: accumulator
				.get_most_sent()
				.get(year)
				.cloned()
				.unwrap_or_default(),
			word_count: accumulator
				.get_word_and_emoji_counts(75)
				.get(year)
				.cloned()
				.unwrap_or_default(),
			average_per_day: accumulator
				.get_average_per_day()
				.get(year)
				.cloned()
				.unwrap_or_default(),
			most_reactions: accumulator
				.get_reaction_stats(handles, contacts, 1)
				.get(year)
				.cloned()
				.unwrap_or_default(),
			top_group_chats: top_group,
			top_individual_chats: top_individual,
			top_down_bad_chats: top_down_bad,
			top_texters_by_top_chat: top_texters,
			top_left_on_read: accumulator
				.get_left_on_read(handles, contacts)
				.get(year)
				.cloned()
				.unwrap_or_default(),
			total_characters: accumulator
				.get_character_counts()
				.get(year)
				.cloned()
				.unwrap_or_default(),
			top_user_by_slurs: accumulator
				.get_top_user_by_slurs(*year, contacts)
				.unwrap_or_default(),
			top_group_chat_by_slurs: accumulator
				.get_top_group_chat_by_slurs(*year, contacts, handles)
				.unwrap_or_default(),
			fastest_responder: fastest,
			slowest_responder: slowest,
			longest_message: accumulator
				.get_longest_message(*year, contacts)
				.unwrap_or_default(),
			top_hater,
			top_glazer,
			top_favor_asker: accumulator
				.get_top_favor_asker(*year, contacts)
				.unwrap_or_default(),
			top_freaky_texter: accumulator
				.get_top_freaky_texter(*year, contacts)
				.unwrap_or_default(),
			top_double_texter,
			worst_send_received_ratio: worst_send_received,
			top_realest_friend: accumulator
				.get_realest_friend(*year, contacts)
				.unwrap_or_default()
		};

		all_stats.push(year_stats);
	}

	let timing = accumulator.timings;
	timing.borrow_mut().total_time = start.elapsed();

	(YearsStats { years, stats: all_stats }, timing.into_inner())
}
