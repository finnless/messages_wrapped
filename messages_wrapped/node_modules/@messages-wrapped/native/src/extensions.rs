use rusqlite::types::FromSql;
use rusqlite::{Error, Row};
use rusqlite::types::ValueRef;

mod private {
	/// Sealed trait. The parent module is private so it prevents outsiders from
	/// implementing this trait
	pub trait Sealed {}
}

type ColumnIndexResult = rusqlite::Result<usize>;

pub trait GetIndex: private::Sealed {
	fn get_index<T>(&self, idx: &ColumnIndexResult) -> rusqlite::Result<T>
	where
		T: FromSql;
}

pub trait GetRefIndex: private::Sealed {
	fn get_ref_index(&self, idx: &rusqlite::Result<usize>) -> rusqlite::Result<ValueRef<'_>>;
}

impl private::Sealed for Row<'_> {}

impl GetIndex for Row<'_> {
	fn get_index<T>(&self, idx: &ColumnIndexResult) -> rusqlite::Result<T>
	where
		T: FromSql
	{
		match idx {
			Ok(idx) => self.get(*idx),
			Err(Error::InvalidColumnName(name)) => Err(Error::InvalidColumnName(name.clone())),

			/* note: the error must be InvalidColumnName */
			_ => unreachable!()
		}
	}
}

impl GetRefIndex for Row<'_> {
	fn get_ref_index(&self, idx: &rusqlite::Result<usize>) -> rusqlite::Result<ValueRef<'_>> {
		match idx {
			Ok(idx) => self.get_ref(*idx),
			Err(Error::InvalidColumnName(name)) => {
				Err(Error::InvalidColumnName(name.clone()))
			}
			_ => unreachable!()
		}
	}
}
