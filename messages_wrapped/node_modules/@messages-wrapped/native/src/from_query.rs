use rusqlite::{Connection, Params, Statement};

use crate::AnalyzerResult;

pub trait FromQuery: Sized {
	/* note that this fails with Err if even a single message couldn't be get'd
	 * or parsed from the DB though imessage-database doesn't seem to do any
	 * parsing, only db getting, so it should be fine.
	 */
	fn from_query<P>(stmt: &mut Statement<'_>, params: P) -> AnalyzerResult<Vec<Self>>
	where
		P: Params;
}

pub trait FromQueryTable: FromQuery {
	fn from_query_tbl<P>(stmt: &mut Statement<'_>, params: P) -> AnalyzerResult<Vec<Self>>
	where
		P: Params;
}

pub trait QueryAll: Sized {
	/// Get all items in the database
	fn query_all<P>(db: &Connection, params: P) -> AnalyzerResult<Vec<Self>>
	where
		P: Params;
}

/* blanket impl for any type that impls Table and FromQuery */
/*
impl<T> QueryAll for T
where
	T: Table + FromQueryTable
{
	fn query_all<P>(db: &Connection, params: P) -> AnalyzerResult<Vec<Self>>
	where
		P: Params
	{
		let mut stmt = Self::get(db)?;
		Self::from_query_tbl(&mut stmt, params)
	}
}
*/
